From b4a473bf3ca4c4aa19b579531e45e874db3af1fa Mon Sep 17 00:00:00 2001
From: Yichao Yu <yyc1992@gmail.com>
Date: Thu, 28 Oct 2021 09:25:05 -0400
Subject: [PATCH] trim down

---
 planisphere-report-go/helpers/linux.go | 103 ++-----------------------
 1 file changed, 7 insertions(+), 96 deletions(-)

diff --git a/planisphere-report-go/helpers/linux.go b/planisphere-report-go/helpers/linux.go
index 85465e0..f440a93 100644
--- a/planisphere-report-go/helpers/linux.go
+++ b/planisphere-report-go/helpers/linux.go
@@ -24,125 +24,36 @@ func ApplyPlatformDetections(l *Lookuper) error {
 func GetInstalledSoftware() ([][]string, error) {
 	softwareTable := [][]string{}
 
-	// RPMs
-	rpmPath, err := exec.LookPath("rpm")
-	if err == nil {
-		rpmOut, err := exec.Command(rpmPath, "-qa", "--qf", "%{NAME} %|EPOCH?{%{EPOCH}:}:{}|%{VERSION}-%{RELEASE}\n").Output()
-		if err != nil {
-			log.Warning("Could not do an rpm listing even though the rpm command exists")
-		}
-		trimmed := strings.Trim(string(rpmOut), "\n")
-		for _, line := range strings.Split(trimmed, "\n") {
-			pieces := strings.Split(line, " ")
-			name := pieces[0]
-			version := pieces[1]
-
-			softwareTable = append(softwareTable, []string{name, version})
-		}
-	} else {
-		log.Println("No rpm command installed")
-	}
-
-	// DPKG-Query
-	cmdPath, err := exec.LookPath("dpkg-query")
+	// Pacman nom nom nom
+	cmdPath, err := exec.LookPath("pacman")
 	if err == nil {
-		cmdOut, err := exec.Command(cmdPath, "-W").Output()
-		if err != nil {
-			log.Warning("Could not do a dpkg-query listing even though the command exists")
-		}
+		cmdOut, _ := exec.Command(cmdPath, "-Q", "linux", "glibc").Output()
 		trimmed := strings.Trim(string(cmdOut), "\n")
-		for _, line := range strings.Split(trimmed, "\n") {
-			pieces := strings.Split(line, "\t")
-			if len(pieces) != 2 {
-				log.Warningf("Got weird line from dpkg: %v", line)
-			} else {
+		if len(trimmed) > 0 {
+			for _, line := range strings.Split(trimmed, "\n") {
+				pieces := strings.Split(line, " ")
 				name := pieces[0]
 				version := pieces[1]
 
 				softwareTable = append(softwareTable, []string{name, version})
 			}
 		}
-	} else {
-		log.Println("No dpkg-query command installed")
-	}
-
-	// Pacman nom nom nom
-	cmdPath, err = exec.LookPath("pacman")
-	if err == nil {
-		cmdOut, err := exec.Command(cmdPath, "-Q").Output()
-		if err != nil {
-			log.Warning("Could not do a pacman listing even though the command exists")
-		}
-		trimmed := strings.Trim(string(cmdOut), "\n")
-		for _, line := range strings.Split(trimmed, "\n") {
-			pieces := strings.Split(line, " ")
-			name := pieces[0]
-			version := pieces[1]
-
-			softwareTable = append(softwareTable, []string{name, version})
-		}
 	} else {
 		log.Println("No pacman command installed")
 	}
 
-	// Guix
-	cmdPath, err = exec.LookPath("guix-installed")
-	if err == nil {
-		cmdOut, err := exec.Command(cmdPath).Output()
-		if err != nil {
-			log.Warning("Could not do a guix-installed listing even though the command exists")
-		}
-		trimmed := strings.Trim(string(cmdOut), "\n")
-		for _, line := range strings.Split(trimmed, "\n") {
-			pieces := strings.Split(line, "\t")
-			name := pieces[0]
-			version := pieces[1]
-
-			softwareTable = append(softwareTable, []string{name, version})
-		}
-	} else {
-		log.Println("No guix-installed command installed")
-	}
-
 	return softwareTable, nil
 }
 
 func setSerial(l *Lookuper) (interface{}, error) {
-	return si.Product.Serial, nil
+	return "Default string", nil
 }
 
 func setManufacturer(l *Lookuper) (interface{}, error) {
-	// Is it a Raspberry Pi?
-	for _, mac := range l.Payload.Data.MacAddresses {
-		if strings.HasPrefix(mac, "b8:27:eb") {
-			return "Raspberry Pi", nil
-		}
-	}
 	return si.Product.Vendor, nil
 }
 
 func setModel(l *Lookuper) (interface{}, error) {
-	// Is it a Raspberry Pi?
-	for _, mac := range l.Payload.Data.MacAddresses {
-		if strings.HasPrefix(mac, "b8:27:eb") {
-			cpuDat, err := os.ReadFile("/proc/cpuinfo")
-			if err != nil {
-				log.Warning(err)
-				continue
-			}
-			trimmed := strings.Trim(string(cpuDat), "\n")
-			for _, line := range strings.Split(trimmed, "\n") {
-				pieces := strings.SplitN(line, ":", 2)
-				key := strings.TrimSpace(pieces[0])
-				value := strings.TrimSpace(pieces[1])
-				if key == "Revision" {
-					if _, ok := RaspberryPiModels[value]; ok {
-						return RaspberryPiModels[value], nil
-					}
-				}
-			}
-		}
-	}
 	return si.Product.Name, nil
 }
 
-- 
2.33.1

