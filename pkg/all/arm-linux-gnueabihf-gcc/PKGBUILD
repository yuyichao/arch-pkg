# Contributor: Alexander 'hatred' Drozdov <adrozdoff@gmail.com>
# Maintainer: Erico Nunes <nunes dot erico at gmail>

_target="arm-linux-gnueabihf"
pkgbase=${_target}-gcc
_pkgname=(gcc gcc-libs gcc-fortran
          gcc-objc
          # gcc-go
         )
pkgver=5.2.0
_pkgver=5
_islver=0.14.1
pkgrel=1
#_snapshot=5-20150623
pkgdesc="The GNU Compiler Collection (${_target})"
arch=(i686 x86_64)
license=('GPL' 'LGPL' 'FDL' 'custom')
url="http://gcc.gnu.org"
depends=("${_target}-binutils>=2.25" "${_target}-glibc" 'libmpc' 'elfutils')
options=('!buildflags' '!libtool' '!emptydirs' 'zipman' 'docs'
         '!strip' 'staticlibs')
source=(
  ftp://gcc.gnu.org/pub/gcc/releases/gcc-${pkgver}/gcc-${pkgver}.tar.bz2
  # ftp://gcc.gnu.org/pub/gcc/snapshots/${_snapshot}/gcc-${_snapshot}.tar.bz2
  http://isl.gforge.inria.fr/isl-${_islver}.tar.bz2
  pr66035.patch
  0001-ARMv5-disable-LDRD-STRD.patch)
md5sums=('a51bcfeb3da7dd4c623e27207ed43467'
         '118d1a379abf7606a3334c98a8411c79'
         '5b980076cd5fcbc3aff6014f306282dd'
         '924a9bcdd7852410667f04ce18c305d7')

if [ -n "${_snapshot}" ]; then
    _basedir=gcc-${_snapshot}
else
  _basedir=gcc-${pkgver}
fi

_libdir="usr/lib/gcc/${_target}/$pkgver"

prepare() {
  cd ${_basedir}

  # link isl for in-tree builds
  ln -sf ../isl-${_islver} isl

  # Do not run fixincludes
  sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in

  echo ${pkgver} > gcc/BASE-VER

  # hack! - some configure tests for header files using "$CPP $CPPFLAGS"
  sed -i "/ac_cpp=/s/\$CPPFLAGS/\$CPPFLAGS -O2/" {libiberty,gcc}/configure

  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66035
  patch -p1 -i ../pr66035.patch

  mkdir -p "${srcdir}"/gcc-build

  # Disable LDRD/STRD on ARMv5 (64-bit alignment issues)
  patch -p1 -i ../0001-ARMv5-disable-LDRD-STRD.patch

  rm -rf "${srcdir}/bin"
  mkdir -p "${srcdir}/bin"
  for c in cc c++ gcc g++; do
    cat > "${srcdir}/bin/arm-linux-gnueabihf-${c}" <<EOF
#!/bin/bash
exec /usr/bin/arm-linux-gnueabihf-${c} -Wl,-rpath-link,/usr/arm-linux-gnueabihf/lib "\$@"
EOF
    chmod +x "${srcdir}/bin/arm-linux-gnueabihf-${c}"
  done
  # Try to make gccgo compilation happy
  cat > "${srcdir}/bin/arm-linux-gnueabihf-ld" <<EOF
#!/bin/bash
exec /usr/bin/arm-linux-gnueabihf-ld -rpath-link /usr/arm-linux-gnueabihf/lib "\$@"
EOF
  chmod +x "${srcdir}/bin/arm-linux-gnueabihf-ld"
}

setup_env() {
  export PATH="${srcdir}/bin:${PATH}"
  export CFLAGS="-O2"
  export CXXFLAGS="-O2"
  export CPP=/usr/bin/cpp
  export CXXCPP=/usr/bin/cpp
}

build() {
  setup_env

  cd gcc-build

  # using -pipe causes spurious test-suite failures
  # http://gcc.gnu.org/bugzilla/show_bug.cgi?id=48565

  ../${_basedir}/configure \
     --prefix=/usr \
     --program-prefix=${_target}- \
     --target=${_target} \
     --host=$CHOST \
     --build=$CHOST \
     --with-sysroot=/usr/${_target} \
     --with-build-sysroot=/usr/${_target} \
     --with-as=/usr/bin/${_target}-as \
     --with-ld=/usr/bin/${_target}-ld \
     --enable-languages=c,c++,fortran,lto,objc,obj-c++ \
     --enable-shared \
     --enable-threads=posix \
     --enable-__cxa_atexit \
     --disable-libunwind-exceptions \
     --enable-clocale=gnu \
     --disable-libstdcxx-pch \
     --disable-libssp \
     --enable-gnu-unique-object \
     --enable-linker-build-id \
     --enable-lto \
     --enable-plugin \
     --enable-install-libiberty \
     --with-linker-hash-style=gnu \
     --enable-gnu-indirect-function \
     --disable-multilib \
     --disable-werror \
     --enable-checking=release \
     --disable-nls \
     --with-float=hard \
     --enable-interwork \
     --enable-addons

  make
}

package_gcc-libs() {
  setup_env
  pkgdesc="Runtime libraries shipped by GCC (${_target})"
  depends=("${_target}-glibc")

  cd gcc-build

  make -C ${_target}/libgcc DESTDIR="${pkgdir}" install-shared
  rm "${pkgdir}/${_libdir}/libgcc_eh.a"

  for lib in libatomic \
             libgfortran \
             libgomp \
             libitm \
             libquadmath \
             libsanitizer/{a,l,ub}san \
             libstdc++-v3/src; do
    make -C $_target/$lib DESTDIR="${pkgdir}" install-toolexeclibLTLIBRARIES
  done

  make -C $_target/libobjc DESTDIR="${pkgdir}" install-libs
}

package_gcc() {
  setup_env
  pkgdesc="The GNU Compiler Collection - C and C++ frontends (${_target})"
  depends=("${_target}-gcc-libs=$pkgver-$pkgrel"
           "${_target}-binutils>=2.25" 'libmpc')
  conflicts=("${_target}-gcc-stage1" "${_target}-gcc-stage2")
  replaces=("${_target}-gcc-stage1" "${_target}-gcc-stage2")
  provides=("${_target}-gcc-stage1=${pkgver}" "${_target}-gcc-stage2=${pkgver}")

  cd gcc-build

  make -C gcc DESTDIR="${pkgdir}" install-driver install-cpp install-gcc-ar \
       c++.install-common install-headers install-plugin install-lto-wrapper

  # install -m755 -t "$pkgdir/usr/bin/" gcc/gcov{,-tool}
  install -m755 -t "$pkgdir/${_libdir}/" gcc/{cc1,cc1plus,collect2,lto1}

  make -C $_target/libgcc DESTDIR="${pkgdir}" install
  rm "${pkgdir}"/usr/${_target}/lib/libgcc_s.so*

  make -C $_target/libstdc++-v3/src DESTDIR="${pkgdir}" install
  make -C $_target/libstdc++-v3/include DESTDIR="${pkgdir}" install
  make -C $_target/libstdc++-v3/libsupc++ DESTDIR="${pkgdir}" install

  rm "${pkgdir}"/usr/${_target}/lib/libstdc++.*

  make DESTDIR="${pkgdir}" install-fixincludes
  make -C gcc DESTDIR="${pkgdir}" install-mkheaders

  make -C lto-plugin DESTDIR="${pkgdir}" install
  # install -dm755 "${pkgdir}"/usr/lib/bfd-plugins/
  # ln -s /usr/lib/gcc/$_target/${pkgver}/liblto_plugin.so \
  #    "${pkgdir}"/usr/lib/bfd-plugins/

  make -C $_target/libgomp DESTDIR="${pkgdir}" \
       install-nodist_toolexeclibHEADERS install-nodist_libsubincludeHEADERS
  make -C $_target/libitm DESTDIR="${pkgdir}" install-nodist_toolexeclibHEADERS
  make -C $_target/libquadmath DESTDIR="${pkgdir}" \
       install-nodist_libsubincludeHEADERS
  make -C $_target/libsanitizer DESTDIR="${pkgdir}" \
       install-nodist_toolexeclibHEADERS
  make -C $_target/libsanitizer/asan DESTDIR="${pkgdir}" \
       install-nodist_toolexeclibHEADERS

  make -C libiberty DESTDIR="${pkgdir}" install
  mkdir -p "${pkgdir}"/usr/${_target}/include
  mv "${pkgdir}"/usr/include/libiberty "${pkgdir}"/usr/${_target}/include
  # install PIC version of libiberty
  install -m644 "${srcdir}"/gcc-build/libiberty/pic/libiberty.a \
          "${pkgdir}"/usr/${_target}/lib

  make -C libcpp DESTDIR="${pkgdir}" install
  rm "$pkgdir"/usr/lib/libiberty.a
}

package_gcc-fortran() {
  setup_env
  pkgdesc="Fortran front-end for GCC (${_target})"
  depends=("${_target}-gcc=$pkgver-$pkgrel")

  cd gcc-build
  make -C $_target/libgfortran DESTDIR="$pkgdir" \
       install-{caf,my}execlibLTLIBRARIES \
       install-{toolexeclibDATA,nodist_fincludeHEADERS}
  make -C $_target/libgomp DESTDIR="$pkgdir" install-nodist_fincludeHEADERS
  make -C gcc DESTDIR="$pkgdir" fortran.install-common

  install -Dm755 gcc/f951 $pkgdir/${_libdir}/f951
}

package_gcc-objc() {
  setup_env
  pkgdesc="Objective-C front-end for GCC (${_target})"
  depends=("${_target}-gcc=$pkgver-$pkgrel")

  cd gcc-build
  make DESTDIR="$pkgdir" -C $_target/libobjc install-headers
  install -dm755 "$pkgdir"/${_libdir}
  install -m755 gcc/cc1obj{,plus} "$pkgdir"/${_libdir}/
}

package_gcc-go() {
  setup_env
  pkgdesc="Go front-end for GCC (${_target})"
  depends=("${_target}-gcc=$pkgver-$pkgrel")

  cd gcc-build
  make -C $_target/libgo DESTDIR="$pkgdir" install-exec-am
  make -C gcc DESTDIR=$pkgdir go.install-common
  install -Dm755 gcc/go1 $pkgdir/${_libdir}/go1

  make DESTDIR=${pkgdir} install-gotools
}

pkgname=()
for pkg in "${_pkgname[@]}"; do
  pkgname=("${pkgname[@]}" "${_target}-${pkg}")
  eval "package_${_target}-${pkg}() {
    package_${pkg}
}"
done

# package() {
#   cd gcc-build

#   # old gcc
#   make DESTDIR="$pkgdir" install-gcc install-target-libgcc \
#        install-target-libstdc++-v3

#   rm "$pkgdir"/usr/lib/libiberty.a
#   rm -rf "$pkgdir"/usr/share/{man/man7,info}/

#   cp -r "$pkgdir"/usr/libexec/* "$pkgdir/usr/lib/"
#   rm -rf "$pkgdir/usr/libexec"

#   rm -rf "$pkgdir/usr/share/gcc-${pkgver}/python"

#   # strip it manually
#   strip "$pkgdir"/usr/bin/* 2>/dev/null || true
#   find "$pkgdir"/usr/lib -type f -exec /usr/bin/${_target}-strip \
#        --strip-unneeded {} \; 2>/dev/null || true
# }
