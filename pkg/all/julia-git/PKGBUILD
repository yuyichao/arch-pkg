# Maintainer: Lex Black <autumn-wind at web dot de>
# Contributor: Michael Jakl <jakl.michael@gmail.com>
# With contributions from many kind people at https://aur.archlinux.org/packages/julia-git/

BUILD_EXTRA=1
USE_OPENLIBM=1
if [[ "$CARCH" = aarch64 ]]; then
    # Openlibm doesn't support aarch64 yet.
    USE_OPENLIBM=0
fi

pkgbase=julia-git
if ((BUILD_EXTRA)); then
   pkgname=('julia-git' 'julia-doc-git' 'emacs-julia-mode-git')
else
   pkgname=('julia-git')
fi
pkgver=0.4.0.rc1.2491.gf37edf4
pkgrel=1
pkgdesc="Julia is a high-level, high-performance, dynamic programming language."
arch=('any' 'i686' 'x86_64' 'armv7h' 'aarch64')
url="http://julialang.org"
license=('GPL')
makedepends=('gcc-fortran' 'arpack' 'fftw' 'git' 'gmp' 'libgit2' 'libunwind'
             'llvm-julia' 'mpfr' 'pcre2' 'suitesparse' 'python2-sphinx'
             'python2-sphinx_rtd_theme' 'python2-pip' 'texlive-langcjk'
             'texlive-latexextra' 'emacs' 'openspecfun' 'openblas'
             'libutf8proc' 'patchelf')
if ((USE_OPENLIBM)); then
    makedepends=("${makedepends[@]}" openlibm)
fi
options=('!emptydirs' 'staticlibs' 'debug' '!strip')
source=('git://github.com/JuliaLang/julia'
        0001-Create-tbaa_gcframe-and-decorate-all-stores-and-load.patch
        0001-Fix-compilation-on-llvm-3.9.patch)
md5sums=('SKIP'
         '9f27c78e7d4e8494bed92a75d1c87aad'
         'd683981883bc1d666ef05f9b6ece4b34')

pkgver() {
  cd julia

  git describe --tags | sed 's/^v//;s/-/./g'
}

prepare() {
  cd julia

  git reset --hard HEAD
  git clean -fdx

  patch -Np1 < ../0001-Create-tbaa_gcframe-and-decorate-all-stores-and-load.patch
  patch -Np1 < ../0001-Fix-compilation-on-llvm-3.9.patch

  cd doc

  # They use the Python2 version for sphinx which has on Arch a different name
  sed 's/pip /pip2 /g' -i Makefile
}

julia_opts=(prefix=/usr sysconfdir=/etc
            USE_SYSTEM_LLVM=1
            USE_SYSTEM_LIBUNWIND=1
            USE_SYSTEM_PCRE=1
            USE_SYSTEM_OPENSPECFUN=1
            USE_SYSTEM_BLAS=1
            USE_SYSTEM_LAPACK=1
            USE_SYSTEM_FFTW=1
            USE_SYSTEM_GMP=1
            USE_SYSTEM_MPFR=1
            USE_SYSTEM_ARPACK=1
            USE_SYSTEM_SUITESPARSE=1
            USE_SYSTEM_UTF8PROC=1
            USE_SYSTEM_LIBGIT2=1
            USE_SYSTEM_PATCHELF=1
            LIBBLASNAME=libopenblas
            LIBBLAS=-lopenblas
            LIBLAPACKNAME=libopenblas
            LIBLAPACK=-lopenblas)

case "$CARCH" in
  x86_64)
    julia_opts=("${julia_opts[@]}" MARCH=x86-64 JULIA_CPU_TARGET=core-avx2)
    ;;
  i686)
    julia_opts=("${julia_opts[@]}" MARCH=pentium4 JULIA_CPU_TARGET=pentium4)
    ;;
  aarch64)
    julia_opts=("${julia_opts[@]}" MARCH=armv8-a JULIA_CPU_TARGET=cortex-a57)
    ;;
  armv7h)
    julia_opts=("${julia_opts[@]}" MARCH=armv7-a JULIA_CPU_TARGET=cortex-a7)
    ;;
esac

if ((USE_OPENLIBM)); then
    julia_opts=("${julia_opts[@]}" USE_SYSTEM_OPENLIBM=1)
else
    julia_opts=("${julia_opts[@]}" USE_SYSTEM_LIBM=1)
fi

build() {
  cd julia

  export CC='gcc -flto'
  export CXX='g++ -flto'
  CFLAGS=${CFLAGS//-march=i686/-march=pentium4}
  CXXFLAGS=${CXXFLAGS//-march=i686/-march=pentium4}
  export CFLAGS+=' -Wno-pedantic -Wno-clobbered -funwind-tables -fasynchronous-unwind-tables'
  export CXXFLAGS+=' -Wno-pedantic -Wno-clobbered -funwind-tables -fasynchronous-unwind-tables'

  make "${julia_opts[@]}" -C base version_git.jl.phony
  make "${julia_opts[@]}" -C deps
  if ((BUILD_EXTRA)); then
      make "${julia_opts[@]}" release debug docs
  else
      make "${julia_opts[@]}" release debug
  fi

  # Check to detect issues like JuliaLang/julia#13820
  usr/bin/julia -e '0'
  usr/bin/julia-debug -e '0'

  if ! ((BUILD_EXTRA)); then
     return
  fi

  (cd contrib
   emacs --batch --eval \
         '(progn
          (push "." load-path)
          (byte-compile-file "julia-mode.el"))')
}

package_julia-git() {
  arch=('i686' 'x86_64')
  depends=('arpack' 'fftw' 'gmp' 'libgit2' 'libunwind' 'llvm-julia' 'mpfr'
           'pcre2' 'hicolor-icon-theme' 'xdg-utils' 'suitesparse' 'openspecfun'
           'openblas' 'libutf8proc')
  if ((USE_OPENLIBM)); then
      depends=("${depends[@]}" openlibm)
  fi
  install=julia.install
  conflicts=('julia')

  cd julia

  make install DESTDIR="$pkgdir" "${julia_opts[@]}"

  # Remove doc files
  rm -r "$pkgdir/usr/share/doc/julia"

  ver=$("$pkgdir/usr/bin/julia" \
            -f -e 'print(VERSION.major, ".", VERSION.minor, ".", VERSION.patch)')

  provides=("julia=2:$ver")
}

package_julia-doc-git() {
  arch=('any')
  pkgdesc+=" (Documents)"
  provides=('julia-doc')
  conflicts=('julia-doc')

  cd julia/doc/_build

  mkdir -p "$pkgdir"/usr/share/doc/julia/
  cp -dpr --no-preserve=ownership html "$pkgdir"/usr/share/doc/julia/
}

package_emacs-julia-mode-git() {
  arch=('any')
  pkgdesc="Emacs major mode for the Julia programming language"
  provides=('emacs-julia-mode')
  conflicts=('emacs-julia-mode')
  depends=('emacs')

  cd julia/contrib

  mkdir -p "$pkgdir/usr/share/emacs/site-lisp"
  install -m644 julia-mode.el "$pkgdir/usr/share/emacs/site-lisp"
  install -m644 julia-mode.elc "$pkgdir/usr/share/emacs/site-lisp"
}
